package poly.persistance.mongo.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.mongodb.BasicDBObject;
import com.mongodb.Cursor;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;

import poly.dto.AttAnalysDTO;
import poly.dto.EmpAttDTO;
import poly.persistance.mongo.IEmpAttMongoMapper;
import poly.util.CmmUtil;

@Component("EmpAttMongoMapper")
public class EmpAttMongoMapper implements IEmpAttMongoMapper{
	
	@Autowired
	private MongoTemplate mongodb;
	
	private Logger log = Logger.getLogger(this.getClass());

	@Override
	public boolean createCollection(String colNm) throws Exception {
		log.info(this.getClass().getName() + ".createCollection Start!!");
		
		boolean res = false;
		
		if(mongodb.collectionExists(colNm)) { // 만약 몽고에 해당 컬렉션이 있으면
			mongodb.dropCollection(colNm); // 기존에 있던 컬렉션 삭제하기
		}
		// 컬렉션과 인덱스 생성(빠른 조회 성능을 위해 인덱스르 사용함)
		mongodb.createCollection(colNm).createIndex(new BasicDBObject("reg_dt", 1).append("empno", 1), "attTime");
		
		res = true;
		
		log.info(this.getClass().getName() + ".createCollection END!!");
		return res;
	}
	// 직원 정보 몽고에 삽입
	@Override
	public int insertEmpATTforMongo(List<EmpAttDTO> pList, String colNm) throws Exception {
		log.info(this.getClass().getName() + ".insertRank Start!");

		int res = 0;

		if (pList == null) {
			pList = new ArrayList<EmpAttDTO>();
		}

		Iterator<EmpAttDTO> it = pList.iterator();

		while (it.hasNext()) {
			EmpAttDTO pDTO = (EmpAttDTO) it.next();

			if (pDTO == null) {
				pDTO = new EmpAttDTO();
			}

			mongodb.insert(pDTO, colNm);

		}

		res = 1;

		log.info(this.getClass().getName() + ".insertRank End!");
		return res;
	}
	
	// 메인 화면에 월 별 지각자 현황을 분석하기 위한 데이터 뽑아오기 
	// 몽고에서 뽑아옴
	@Override
	public List<AttAnalysDTO> selectAttInfoForMongo(String colNm) throws Exception {
		
		log.info(this.getClass().getName() + ".selectAttInfoForMongo start!");
		
		String month = "5";
		String late_checkCount = null;
		
		DBCollection rCollection = mongodb.getCollection(colNm); // colNm 매개변수와 같은 컬렉션을 선택
		
		//BasicDBObject query = new BasicDBObject(); // where 쿼리 만들기 위한 객체 생성
		//query.put("empno", empno); // where 조건 절, empno를 기준으로 쿼리를 가져온다.
		
		Cursor cursor = rCollection.find(); // 쿼리 실행
		
		List<AttAnalysDTO> rList = new ArrayList<>();
		
		AttAnalysDTO rDTO = null; // 몽고 도큐먼트를 DTO에 매칭해서 저장시키기 위한 클래스 객체 선언
		
		// 레코드 단위로 읽음 한마디로 한 줄씩 컬럼과 일치되는 데이터 뽑아옴 
		while(cursor.hasNext()) {
			
			rDTO = new AttAnalysDTO(); // 객체 생성
			
			final DBObject current = cursor.next(); 
			
			late_checkCount = CmmUtil.nvl((String) current.get("late_check"));
			log.info("late_check : " + late_checkCount);
			
			rDTO.setMongo_late_checkCount(late_checkCount);
			
			rList.add(rDTO);
			
			rDTO = null;
		}
		
		log.info(this.getClass().getName() + ".selectAttInfoForMongo END!!!");
		return rList;
	}
	
	/* cron 식으로 스케쥴러 동작을 위한 어노테이션 추가(쿼프 방법도 있으나 구글링 해서 알아볼 것 비슷함)
	* cron 식이란? 초 분 시 일 월 ? 년도 순이 기본 포맷으로 
	* 2020년 5월 8일 15시 16분 30초에 동작을 걸려면
	* ex : 30 16 15 8 5 ? 2020 으로 입력 하면 된다. 또한 년도는 생략가능하다. 30 16 15 8 5 ? or 30 16 15 8 5 ? * 가능
	* 그렇다면 매일 오후 14시 15분 10초에 실행시키고자 하면 일 월에 *를 추가해주면 된다.
	* ex : 10 15 14 * * ?
	* 매일 새벽 4시면?
	* ex : 0 0 4 * * ?
	* 매 시간 10분 마다 실행하는 크론식은?
	* ex : 0 0/10 0 * * * ? => 그러면 0분0초->10분 0초 -> 20분 0초 이런식으로 매 시간 10분 간격으로 실행된다.
	*/
	@Scheduled(cron = "0 0 12 * * ?")
	@Override
	public List<AttAnalysDTO> batSelectAttInfoForMongo(String colNm) throws Exception {
		
		return null;
	}

	

}
