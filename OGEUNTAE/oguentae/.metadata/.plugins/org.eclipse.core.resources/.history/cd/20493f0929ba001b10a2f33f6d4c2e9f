package poly.service.impl;

import java.io.IOException;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.stereotype.Service;

import poly.dto.AttAnalysDTO;
import poly.dto.EmpAttDTO;
import poly.persistance.mapper.IEmpAttMapper;
import poly.persistance.mongo.IEmpAttMongoMapper;
import poly.persistance.mongo.impl.EmpAttMongoMapper;
import poly.service.IEmpAttService;
import poly.util.DateUtill;
import poly.util.JsonParsProc;
import poly.util.UrlUtil;

@Service("EmpAttService")
public class EmpAttService implements IEmpAttService {

	private Logger log = Logger.getLogger(this.getClass());

	@Resource(name = "EmpAttMapper")
	IEmpAttMapper empAttMapper;
	@Resource(name = "EmpAttMongoMapper")
	IEmpAttMongoMapper empMongoMapper;
	

	// 핵심 비즈니스 로직 중 하나 
	@SuppressWarnings("null")
	@Override
	public int empAttProc(String addres) throws IOException, Exception {
		log.info("empAttCheck Start!!!!");
		log.info("addres : " + addres);
		
		String res = "";
		String empno = "";
		String[] empTime = null;
		String[] pEmpTime = null;
		String str ="";
		String insertDate = null; // 출근시간이 입력되는 날짜를 넣기 위한 객체 호출(복합키로 작용할 것임)
		// ################################################################################
		int num = 0;
		int check = 0;
		// ################################################################################
		UrlUtil uu = new UrlUtil(); // API 서버에 보내기 위한 매서드 호출
		EmpAttDTO pDTO = null;
		JSONParser parser = null;
		JSONObject json = null;
		List<EmpAttDTO> pList = empAttMapper.getEmpno(); // 직원 정보 한번에 가져오기
		List<String> jsonList = null;
		// ################################################################################
		List<EmpAttDTO> mongoList = null;
		
		log.info("::" + pList);

		// 파이선 서버로 보내기 위해 문자열로 합침
		for (EmpAttDTO e : pList) {
			empno += e.getEmpno() + ",";
		}
		log.info("String empno :: " + empno);

		res = uu.urlReadforString(addres + empno); // 합쳐진 문자열을 주소와 함께 붙혀서 보내기
		log.info("res : " + res);
		
		pList = null;
		uu = null;
		
		parser = new JSONParser(); // 서버로부터 데이터를 JSON형식으로 받음
		json = (JSONObject) parser.parse(res);
		log.info("json :: " + json);
		
		// 유효성 검사 만약 null 값이 들어오면 객체를 올려서 프로그램 동작 계속 시킴
		if (json == null) {
			log.info("json is null ");
			json = new JSONObject();
		} else {
			num = 1;
			String time = json.get("empno").toString(); // JSON key값(empno)에 담긴 내용을 문자열로 변환해서 받음
			log.info("json : " + time);
			
			empTime = JsonParsProc.JsonParsSplit(time); // json 가공을 위해 만든 메서드를 호출하여 리턴 받음
			log.info("::::" + empTime[0] + empTime[1]);
			
			
			
			insertDate = DateUtill.getDateTime("yyyy-MM-dd"); 
			for(int i = 0; i < empTime.length; i++) {
				pDTO = new EmpAttDTO(); // empno:time 형식이 담긴 배열의 크기 만큼 반복문을 돌려줌
				// :을 기준으로 2개 배열로 나눠 임시 저장시킴 왜냐면 시간도 : 로 구분되기 때문에
				pEmpTime = empTime[i].split("\\:", 2);
				pDTO.setEmpno(pEmpTime[0]); // 홀수는 항상  empno
				log.info("setEmpno : " + pEmpTime[0]);
				
				pDTO.setAtt_date(pEmpTime[1]); // 짝수는 항상 time이 담김
				log.info("setAtt_date : " + pEmpTime[1]);
				pDTO.setReg_dt(insertDate);
				pDTO.setLate_check(JsonParsProc.lateCheck(pEmpTime[1])); // 지각? 정상출석? 문자열로 반환
				
				// 몽고에 넣기 위해 리스트에다가 객체 담기
				mongoList.add(pDTO);
				
				// 디비 인서트 실행 객체를 실어서 생성해줘야 작업이 실행됨 
				// DTO에 단순히 값을 넣어서는 실행 안댐
				check = empAttMapper.insertEmpAttTime(pDTO);
				// 유효성 검사
				if(check == 0) {
					log.info("ATT_DATE insert Fail...");
					pDTO = new EmpAttDTO();
				}else {
					log.info("success!!");
				}
			}
			// 객체 초기화
			pDTO= null;
		}
		
		String colNm = "AttInsert" + DateUtill.getDateTime("yyyyMMdd");
		
		// 컬렉션 생성
		empMongoMapper.createCollection(colNm);
		// 컬렉션에 데이터 삽입하기
		empMongoMapper.insertEmpATTforMongo(mongoList, colNm);
		
		log.info("img Check Process end!!");
		return num;
	}

	@Override
	public List<EmpAttDTO> getEmpno() {
		// TODO Auto-generated method stub
		return null;
	}

}
