package poly.persistance.mongo.impl;

import java.util.Arrays;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;

import com.mongodb.AggregationOptions;
import com.mongodb.BasicDBObject;
import com.mongodb.Cursor;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;

import poly.dto.AttMonthAnaDTO;
import poly.persistance.mongo.IEmpAttMonthAnaMapper;


public class EmpAttMonthAnaMapper implements IEmpAttMonthAnaMapper{
	private Logger log = Logger.getLogger(getClass());
	
	@Autowired
	private MongoTemplate mongodb;
	
	// 년도 별 지각자 수 분석
	@Override
	public List<AttMonthAnaDTO> getAttMonthAna(String colNm) throws Exception {
		log.info(this.getClass().getName() + "분석 시작!!!");
		// 데이터를 가져올 컬렉션 선택
		DBCollection rCol = mongodb.getCollection(colNm);
		//################어그리게이션###################
        List<DBObject> pipeline = Arrays.asList(
                new BasicDBObject()
                        .append("$match", new BasicDBObject()
                                .append("late_Check", "\uC9C0\uAC01")
                        ), 
                new BasicDBObject()
                        .append("$group", new BasicDBObject()
                                .append("_id", new BasicDBObject()
                                        .append("cnt", "$cnt")
                                )
                                .append("COUNT(late_Check)", new BasicDBObject()
                                        .append("$sum", 1)
                                )
                        ), 
                new BasicDBObject()
                        .append("$project", new BasicDBObject()
                                .append("cnt", "$_id.cnt")
                                .append("COUNT(late_Check)", "$COUNT(late_Check)")
                                .append("_id", 0)
                        )
        );
        
        AggregationOptions options = AggregationOptions.builder().allowDiskUse(true).build();
                        
        Cursor cursor = rCol.aggregate(pipeline, options);
        while (cursor.hasNext()) {
            BasicDBObject document = (BasicDBObject) cursor.next();
            System.out.println(document.toString());
        }
		//################어그리게이션###################
		
		return null;
	}

}
